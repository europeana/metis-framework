apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: metis-authentication-deployment
    v: 1
  name: ${DEPLOYMENT_NAME}
spec:
  replicas: ${REPLICAS}
  selector:
    matchLabels:
      app: metis-authentication
  strategy:
    type: ${STRATEGY_TYPE}
  template:
    metadata:
      labels:
        app: metis-authentication
    spec:
      containers:
        - image: ${IMAGE}
          name: metis-authentication
          #        envFrom:
          #        - configMapRef:
          #            name: metis-authentication-env-config
          #        - secretRef:
          #            name: metis-authentication-env-secret
          volumeMounts:
            - name: ibm-ca-truststore-jks-volume
              mountPath: "/data/certificates/ibm-ca-truststore.jks"
              subPath: "ibm-ca-truststore.jks"
              readOnly: true
            - name: log4j2-xml-volume
              mountPath: "/data/logging/log4j2.xml"
              subPath: "log4j2.xml"
              readOnly: true
            - name: properties-volume
              mountPath: "/application.properties"
              subPath: "application.properties"
              readOnly: true
          #Set imagePullPolicy properly for the running environment
          imagePullPolicy: Always
          resources:
            requests:
              cpu: ${REQUESTS_CPU}
              memory: ${REQUESTS_MEMORY}
            limits:
              cpu: ${LIMITS_CPU}
              memory: ${LIMITS_MEMORY}
          ports:
            - name: health-port
              containerPort: 8080
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health-port
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health-port
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health-port
            failureThreshold: 10
            periodSeconds: 10
      volumes:
        - name: ibm-ca-truststore-jks-volume
          configMap:
            name: ${TRUSTSTORE_CONFIGMAP}
        - name: log4j2-xml-volume
          configMap:
            name: ${LOG4J2_XML_CONFIGMAP}
        - name: properties-volume
          secret:
            secretName: ${PROPERTIES_SECRET}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: metis-authentication-service
  name: metis-authentication-service
spec:
  ports:
    - name: http
      port: 8080
  selector:
    app: metis-authentication
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: metis-authentication-ingress
  annotations:
    cert-manager.io/issuer: letsencrypt-production
spec:
  ingressClassName: public-iks-k8s-nginx
  tls:
    - hosts:
        - ${INGRESS_HOSTNAME}
      secretName: ${INGRESS_HOSTNAME}
  rules:
    - host: ${INGRESS_HOSTNAME}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: metis-authentication-service
                port:
                  number: 8080