package eu.europeana.normalization.dates.extraction.extractors;

import static org.junit.jupiter.params.provider.Arguments.of;

import java.util.function.Function;
import java.util.stream.Stream;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.ArgumentsProvider;

class NumericRangeDMYArgumentsProvider implements ArgumentsProvider {

  @Override
  public Stream<? extends Arguments> provideArguments(ExtensionContext extensionContext) {
    return extractDMY();
  }

  static Stream<Arguments> extractDMY() {
    return Stream.of(
        monthYearArguments(),
        dayMonthYearArguments(),
        dayMonthYearInvalidArguments()
    ).flatMap(Function.identity());
  }

  private static Stream<Arguments> monthYearArguments() {
    return Stream.of(
        monthYear_SlashArguments(),
        monthYear_SpacedDashArguments(),
        monthYear_PipeArguments(),
        monthYear_DashArguments(),
        monthYear_SpaceArguments()
    ).flatMap(Function.identity());
  }

  private static Stream<Arguments> monthYear_SlashArguments() {
    return Stream.of(
        of("11-1989/11-1990", "1989-11/1990-11"),
        of("11.1989/11.1990", "1989-11/1990-11"),
        of("11-198/11-199", "0198-11/0199-11"),
        of("11.198/11.199", "0198-11/0199-11"),
        of("11-1989?/11-1990?", "1989-11?/1990-11?"),
        of("11.1989?/11.1990?", "1989-11?/1990-11?"),
        of("?11-1989/?11-1990", "1989-11?/1990-11?"),
        of("?11.1989/?11.1990", "1989-11?/1990-11?"),
        //Unspecified
        of("11-1989/?", "1989-11/.."),
        of("11-1989/-", "1989-11/.."),
        of("11-1989/..", "1989-11/.."),
        of("?/11-1989", "../1989-11"),
        of("-/11-1989", "../1989-11"),
        of("../11-1989", "../1989-11"),
        of("11.1989/?", "1989-11/.."),
        of("11.1989/-", "1989-11/.."),
        of("11.1989/..", "1989-11/.."),
        of("?/11.1989", "../1989-11"),
        of("-/11.1989", "../1989-11"),
        of("../11.1989", "../1989-11")
    );
  }

  private static Stream<Arguments> monthYear_SpacedDashArguments() {
    return Stream.of(
        of("11-1989 - 11-1990", "1989-11/1990-11"),
        of("11.1989 - 11.1990", "1989-11/1990-11"),
        of("11/1989 - 11/1990", "1989-11/1990-11"),
        of("11-198 - 11-199", "0198-11/0199-11"),
        of("11.198 - 11.199", "0198-11/0199-11"),
        of("11/198 - 11/199", "0198-11/0199-11"),
        of("11-1989? - 11-1990?", "1989-11?/1990-11?"),
        of("11.1989? - 11.1990?", "1989-11?/1990-11?"),
        of("11/1989? - 11/1990?", "1989-11?/1990-11?"),
        of("?11-1989 - ?11-1990", "1989-11?/1990-11?"),
        of("?11.1989 - ?11.1990", "1989-11?/1990-11?"),
        of("?11/1989 - ?11/1990", "1989-11?/1990-11?"),
        //Unspecified
        of("11/1989 - ?", "1989-11/.."),
        of("11/1989 - -", "1989-11/.."),
        of("11/1989 - ..", "1989-11/.."),
        of("? - 11/1989", "../1989-11"),
        of("- - 11/1989", "../1989-11"),
        of(".. - 11/1989", "../1989-11"),
        of("11-1989 - ?", "1989-11/.."),
        of("11-1989 - -", "1989-11/.."),
        of("11-1989 - ..", "1989-11/.."),
        of("? - 11-1989", "../1989-11"),
        of("- - 11-1989", "../1989-11"),
        of(".. - 11-1989", "../1989-11"),
        of("11.1989 - ?", "1989-11/.."),
        of("11.1989 - -", "1989-11/.."),
        of("11.1989 - ..", "1989-11/.."),
        of("? - 11.1989", "../1989-11"),
        of("- - 11.1989", "../1989-11"),
        of(".. - 11.1989", "../1989-11")
    );
  }

  private static Stream<Arguments> monthYear_PipeArguments() {
    return Stream.of(
        of("11-1989|11-1990", "1989-11/1990-11"),
        of("11.1989|11.1990", "1989-11/1990-11"),
        of("11/1989|11/1990", "1989-11/1990-11"),
        of("11-198|11-199", "0198-11/0199-11"),
        of("11.198|11.199", "0198-11/0199-11"),
        of("11/198|11/199", "0198-11/0199-11"),
        of("11-1989?|11-1990?", "1989-11?/1990-11?"),
        of("11.1989?|11.1990?", "1989-11?/1990-11?"),
        of("11/1989?|11/1990?", "1989-11?/1990-11?"),
        of("?11-1989|?11-1990", "1989-11?/1990-11?"),
        of("?11.1989|?11.1990", "1989-11?/1990-11?"),
        of("?11/1989|?11/1990", "1989-11?/1990-11?"),
        //Unspecified
        of("11/1989|?", "1989-11/.."),
        of("11/1989|-", "1989-11/.."),
        of("11/1989|..", "1989-11/.."),
        of("?|11/1989", "../1989-11"),
        of("-|11/1989", "../1989-11"),
        of("..|11/1989", "../1989-11"),
        of("11-1989|?", "1989-11/.."),
        of("11-1989|-", "1989-11/.."),
        of("11-1989|..", "1989-11/.."),
        of("?|11-1989", "../1989-11"),
        of("-|11-1989", "../1989-11"),
        of("..|11-1989", "../1989-11"),
        of("11.1989|?", "1989-11/.."),
        of("11.1989|-", "1989-11/.."),
        of("11.1989|..", "1989-11/.."),
        of("?|11.1989", "../1989-11"),
        of("-|11.1989", "../1989-11"),
        of("..|11.1989", "../1989-11")
    );
  }

  private static Stream<Arguments> monthYear_DashArguments() {
    return Stream.of(
        of("11.1989-11.1990", "1989-11/1990-11"),
        of("11/1989-11/1990", "1989-11/1990-11"),
        of("11.198-11.199", "0198-11/0199-11"),
        of("11/198-11/199", "0198-11/0199-11"),
        of("11.1989?-11.1990?", "1989-11?/1990-11?"),
        of("11/1989?-11/1990?", "1989-11?/1990-11?"),
        of("?11/1989-?11/1990", "1989-11?/1990-11?"),
        of("?11.1989-?11.1990", "1989-11?/1990-11?"),
        //Unspecified
        of("11/1989-?", "1989-11/.."),
        of("11/1989--", null, null),
        of("11/1989-..", "1989-11/.."),
        of("?-11/1989", "../1989-11"),
        of("--11/1989", null, null),
        of("..-11/1989", "../1989-11"),
        of("11.1989-?", "1989-11/.."),
        of("11.1989--", null, null),
        of("11.1989-..", "1989-11/.."),
        of("?-11.1989", "../1989-11"),
        of("--11.1989", null, null),
        of("..-11.1989", "../1989-11")
    );
  }

  private static Stream<Arguments> monthYear_SpaceArguments() {
    return Stream.of(
        of("11-1989 11-1990", "1989-11/1990-11"),
        of("11.1989 11.1990", "1989-11/1990-11"),
        of("11/1989 11/1990", "1989-11/1990-11"),
        of("11-198 11-199", "0198-11/0199-11"),
        of("11.198 11.199", "0198-11/0199-11"),
        of("11/198 11/199", "0198-11/0199-11"),
        of("11-1989? 11-1990?", "1989-11?/1990-11?"),
        of("11.1989? 11.1990?", "1989-11?/1990-11?"),
        of("11/1989? 11/1990?", "1989-11?/1990-11?"),
        of("?11-1989 ?11-1990", "1989-11?/1990-11?"),
        of("?11.1989 ?11.1990", "1989-11?/1990-11?"),
        of("?11/1989 ?11/1990", "1989-11?/1990-11?"),
        //Unspecified does not apply on space separator
        of("11/1989 ", null, null),
        of(" 11/1989", null, null),
        of("11-1989 ", null, null),
        of(" 11-1989", null, null),
        of("11.1989", null, null),
        of(" 11.1989", null, null)
    );
  }

  private static Stream<Arguments> dayMonthYearArguments() {
    return Stream.of(
        dayMonthYear_SlashArguments(),
        dayMonthYear_SpacedDashArguments(),
        dayMonthYear_PipeArguments(),
        dayMonthYear_DashArguments(),
        dayMonthYear_SpaceArguments()
    ).flatMap(Function.identity());
  }

  private static Stream<Arguments> dayMonthYear_SlashArguments() {
    return Stream.of(
        of("01-11-1989/01-11-1990", "1989-11-01/1990-11-01"),
        of("01.11.1989/01.11.1990", "1989-11-01/1990-11-01"),
        of("01-11-198/01-11-199", "0198-11-01/0199-11-01"),
        of("01.11.198/01.11.199", "0198-11-01/0199-11-01"),
        //Some missing digits are allowed
        of("1-1-989/01-11-990", "0989-01-01/0990-11-01"),
        of("1.1.989/01.11.990", "0989-01-01/0990-11-01"),
        of("01-11-1989?/01-11-1990?", "1989-11-01?/1990-11-01?"),
        of("01.11.1989?/01.11.1990?", "1989-11-01?/1990-11-01?"),
        of("?01-11-1989/?01-11-1990", "1989-11-01?/1990-11-01?"),
        of("?01.11.1989/?01.11.1990", "1989-11-01?/1990-11-01?"),
        //Combination of date parts separators
        of("01-11-1989/01.11.1990", "1989-11-01/1990-11-01"),
        of("01-11-1989?/01.11.1990?", "1989-11-01?/1990-11-01?"),
        //Unspecified
        of("01-11-1989/?", "1989-11-01/.."),
        of("01-11-1989/-", "1989-11-01/.."),
        of("01-11-1989/..", "1989-11-01/.."),
        of("?/01-11-1989", "../1989-11-01"),
        of("-/01-11-1989", "../1989-11-01"),
        of("../01-11-1989", "../1989-11-01"),
        of("01.11.1989/?", "1989-11-01/.."),
        of("01.11.1989/-", "1989-11-01/.."),
        of("01.11.1989/..", "1989-11-01/.."),
        of("?/01.11.1989", "../1989-11-01"),
        of("-/01.11.1989", "../1989-11-01"),
        of("../01.11.1989", "../1989-11-01")
    );
  }

  private static Stream<Arguments> dayMonthYear_SpacedDashArguments() {
    return Stream.of(
        of("01-11-1989 - 01-11-1990", "1989-11-01/1990-11-01"),
        of("01.11.1989 - 01.11.1990", "1989-11-01/1990-11-01"),
        of("01/11/1989 - 01/11/1990", "1989-11-01/1990-11-01"),
        of("01-11-198 - 01-11-199", "0198-11-01/0199-11-01"),
        of("01.11.198 - 01.11.199", "0198-11-01/0199-11-01"),
        of("01/11/198 - 01-11-199", "0198-11-01/0199-11-01"),
        //Some missing digits are allowed
        of("1-1-989 - 01-11-990", "0989-01-01/0990-11-01"),
        of("1.1.989 - 01.11.990", "0989-01-01/0990-11-01"),
        of("1/1/989 - 01/11/990", "0989-01-01/0990-11-01"),
        of("01-11-1989? - 01-11-1990?", "1989-11-01?/1990-11-01?"),
        of("01.11.1989? - 01.11.1990?", "1989-11-01?/1990-11-01?"),
        of("01/11/1989? - 01/11/1990?", "1989-11-01?/1990-11-01?"),
        of("?01-11-1989 - ?01-11-1990", "1989-11-01?/1990-11-01?"),
        of("?01-11-1989 - ?01.11.1990", "1989-11-01?/1990-11-01?"),
        of("?01/11/1989 - ?01/11/1990", "1989-11-01?/1990-11-01?"),
        //Combination of date parts separators
        of("01-11-1989 - 01.11.1990", "1989-11-01/1990-11-01"),
        of("01-11-1989 - 01/11/1990", "1989-11-01/1990-11-01"),
        of("01-11-1989? - 01.11.1990?", "1989-11-01?/1990-11-01?"),
        of("01-11-1989? - 01/11/1990?", "1989-11-01?/1990-11-01?"),
        //Unspecified
        of("01/11/1989 - ?", "1989-11-01/.."),
        of("01/11/1989 - -", "1989-11-01/.."),
        of("01/11/1989 - ..", "1989-11-01/.."),
        of("? - 01/11/1989", "../1989-11-01"),
        of("- - 01/11/1989", "../1989-11-01"),
        of(".. - 01/11/1989", "../1989-11-01"),
        of("01-11-1989 - ?", "1989-11-01/.."),
        of("01-11-1989 - -", "1989-11-01/.."),
        of("01-11-1989 - ..", "1989-11-01/.."),
        of("? - 01-11-1989", "../1989-11-01"),
        of("- - 01-11-1989", "../1989-11-01"),
        of(".. - 01-11-1989", "../1989-11-01"),
        of("01.11.1989 - ?", "1989-11-01/.."),
        of("01.11.1989 - -", "1989-11-01/.."),
        of("01.11.1989 - ..", "1989-11-01/.."),
        of("? - 01.11.1989", "../1989-11-01"),
        of("- - 01.11.1989", "../1989-11-01"),
        of(".. - 01.11.1989", "../1989-11-01")
    );
  }

  private static Stream<Arguments> dayMonthYear_PipeArguments() {
    return Stream.of(
        of("01-11-1989|01-11-1990", "1989-11-01/1990-11-01"),
        of("01.11.1989|01.11.1990", "1989-11-01/1990-11-01"),
        of("01/11/1989|01/11/1990", "1989-11-01/1990-11-01"),
        of("01-11-198|01-11-199", "0198-11-01/0199-11-01"),
        of("01.11.198|01.11.199", "0198-11-01/0199-11-01"),
        of("01/11/198|01-11-199", "0198-11-01/0199-11-01"),
        //Some missing digits are allowed
        of("1-1-989|01-11-990", "0989-01-01/0990-11-01"),
        of("1.1.989|01.11.990", "0989-01-01/0990-11-01"),
        of("1/1/989|01/11/990", "0989-01-01/0990-11-01"),
        of("01-11-1989?|01-11-1990?", "1989-11-01?/1990-11-01?"),
        of("01.11.1989?|01.11.1990?", "1989-11-01?/1990-11-01?"),
        of("01/11/1989?|01/11/1990?", "1989-11-01?/1990-11-01?"),
        of("?01-11-1989|?01-11-1990", "1989-11-01?/1990-11-01?"),
        of("?01-11-1989|?01.11.1990", "1989-11-01?/1990-11-01?"),
        of("?01/11/1989|?01/11/1990", "1989-11-01?/1990-11-01?"),
        //Combination of date parts separators
        of("01-11-1989|01.11.1990", "1989-11-01/1990-11-01"),
        of("01-11-1989|01/11/1990", "1989-11-01/1990-11-01"),
        of("01-11-1989?|01.11.1990?", "1989-11-01?/1990-11-01?"),
        of("01-11-1989?|01/11/1990?", "1989-11-01?/1990-11-01?"),
        //Unspecified
        of("01/11/1989|?", "1989-11-01/.."),
        of("01/11/1989|-", "1989-11-01/.."),
        of("01/11/1989|..", "1989-11-01/.."),
        of("?|01/11/1989", "../1989-11-01"),
        of("-|01/11/1989", "../1989-11-01"),
        of("..|01/11/1989", "../1989-11-01"),
        of("01-11-1989|?", "1989-11-01/.."),
        of("01-11-1989|-", "1989-11-01/.."),
        of("01-11-1989|..", "1989-11-01/.."),
        of("?|01-11-1989", "../1989-11-01"),
        of("-|01-11-1989", "../1989-11-01"),
        of("..|01-11-1989", "../1989-11-01"),
        of("01.11.1989|?", "1989-11-01/.."),
        of("01.11.1989|-", "1989-11-01/.."),
        of("01.11.1989|..", "1989-11-01/.."),
        of("?|01.11.1989", "../1989-11-01"),
        of("-|01.11.1989", "../1989-11-01"),
        of("..|01.11.1989", "../1989-11-01")
    );
  }

  private static Stream<Arguments> dayMonthYear_DashArguments() {
    return Stream.of(
        of("01/11/1989-01/11/1990", "1989-11-01/1990-11-01"),
        of("01.11.1989-01.11.1990", "1989-11-01/1990-11-01"),
        of("01.11.198-01.11.199", "0198-11-01/0199-11-01"),
        of("01/11/198-01/11/199", "0198-11-01/0199-11-01"),
        //Some missing digits are allowed
        of("1.1.989-01.11.990", "0989-01-01/0990-11-01"),
        of("1/1/989-01/11/990", "0989-01-01/0990-11-01"),
        of("01/11/1989?-01/11/1990?", "1989-11-01?/1990-11-01?"),
        of("01.11.1989?-01.11.1990?", "1989-11-01?/1990-11-01?"),
        of("?01/11/1989-?01/11/1990", "1989-11-01?/1990-11-01?"),
        of("?01.11.1989-?01.11.1990", "1989-11-01?/1990-11-01?"),
        //Combination of date parts separators
        of("01/11/1989-01.11.1990", "1989-11-01/1990-11-01"),
        of("01/11/1989?-01.11.1990?", "1989-11-01?/1990-11-01?"),
        //Unspecified
        of("01/11/1989-?", "1989-11-01/.."),
        of("01/11/1989--", null, null),
        of("01/11/1989-..", "1989-11-01/.."),
        of("?-01/11/1989", "../1989-11-01"),
        of("--01/11/1989", null, null),
        of("..-01/11/1989", "../1989-11-01"),
        of("01.11.1989-?", "1989-11-01/.."),
        of("01.11.1989--", null, null),
        of("01.11.1989-..", "1989-11-01/.."),
        of("?-01.11.1989", "../1989-11-01"),
        of("--01.11.1989", null, null),
        of("..-01.11.1989", "../1989-11-01")
    );
  }

  private static Stream<Arguments> dayMonthYear_SpaceArguments() {
    return Stream.of(
        of("01-11-1989 01-11-1990", "1989-11-01/1990-11-01"),
        of("01.11.1989 01.11.1990", "1989-11-01/1990-11-01"),
        of("01/11/1989 01/11/1990", "1989-11-01/1990-11-01"),
        of("01-11-198 01-11-199", "0198-11-01/0199-11-01"),
        of("01.11.198 01.11.199", "0198-11-01/0199-11-01"),
        of("01/11/198 01-11-199", "0198-11-01/0199-11-01"),
        //Some missing digits are allowed
        of("1-1-989 01-11-990", "0989-01-01/0990-11-01"),
        of("1.1.989 01.11.990", "0989-01-01/0990-11-01"),
        of("1/1/989 01/11/990", "0989-01-01/0990-11-01"),
        of("01-11-1989? 01-11-1990?", "1989-11-01?/1990-11-01?"),
        of("01.11.1989? 01.11.1990?", "1989-11-01?/1990-11-01?"),
        of("01/11/1989? 01/11/1990?", "1989-11-01?/1990-11-01?"),
        of("?01-11-1989 ?01-11-1990", "1989-11-01?/1990-11-01?"),
        of("?01.11.1989 ?01.11.1990", "1989-11-01?/1990-11-01?"),
        of("?01/11/1989 ?01/11/1990", "1989-11-01?/1990-11-01?"),
        //Combination of date parts separators
        of("01-11-1989 01.11.1990", "1989-11-01/1990-11-01"),
        of("01-11-1989 01/11/1990", "1989-11-01/1990-11-01"),
        of("01.11.1989 01/11/1990", "1989-11-01/1990-11-01"),
        of("01-11-1989? 01.11.1990?", "1989-11-01?/1990-11-01?"),
        of("01-11-1989? 01/11/1990?", "1989-11-01?/1990-11-01?"),
        of("01.11.1989? 01/11/1990?", "1989-11-01?/1990-11-01?"),
        //Unspecified does not apply on space separator
        of("01/11/1989 ", null, null),
        of(" 01/11/1989", null, null),
        of("01-11-1989 ", null, null),
        of(" 01-11-1989", null, null),
        of("01.11.1989 ", null, null),
        of(" 01.11.1989", null, null)
    );
  }

  private static Stream<Arguments> dayMonthYearInvalidArguments() {
    return Stream.of(
        //Too few digits on year
        of("01-01-89/01-01-90", null, null),
        of("1.1.89/1.1.90", null, null),
        of("1/1/89-1/1/90", null, null),
        //Too many digits on year
        of("01-01-12345/01-01-12346", null, null),
        //Too many digits on month
        of("12-123-1234/12-123-1235", null, null),
        //Too many digits on day
        of("123-12-1234/123-12-1235", null, null)
    );
  }
}