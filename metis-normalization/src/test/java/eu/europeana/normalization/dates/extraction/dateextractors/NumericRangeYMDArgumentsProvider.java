package eu.europeana.normalization.dates.extraction.dateextractors;

import static org.junit.jupiter.params.provider.Arguments.of;

import java.util.function.Function;
import java.util.stream.Stream;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.ArgumentsProvider;

class NumericRangeYMDArgumentsProvider implements ArgumentsProvider {

  @Override
  public Stream<? extends Arguments> provideArguments(ExtensionContext extensionContext) {
    return extractYMD();
  }

  static Stream<Arguments> extractYMD() {
    return Stream.of(
        yearArguments(),
        yearMonthArguments(),
        yearMonthDayArguments(),
        yearMonthDayInvalidArguments()
    ).flatMap(Function.identity());
  }

  private static Stream<Arguments> yearArguments() {
    return Stream.of(
        year_SlashArguments(),
        year_SpacedDashArguments(),
        year_PipeArguments(),
        year_DashArguments(),
        year_SpaceArguments()
    ).flatMap(Function.identity());
  }

  private static Stream<Arguments> year_SlashArguments() {
    return Stream.of(
        of("1989/1990", "1989/1990"),
        of("198/199", "0198/0199"),
        of("1989?/1990?", "1989?/1990?"),
        of("?1989/?1990", "1989?/1990?"),
        //Unspecified
        of("1989/?", "1989/.."),
        of("1989/-", "1989/.."),
        of("1989/..", "1989/.."),
        of("?/1989", "../1989"),
        of("-/1989", "../1989"),
        of("../1989", "../1989")
    );
  }

  private static Stream<Arguments> year_SpacedDashArguments() {
    return Stream.of(
        of("1989 - 1990", "1989/1990"),
        of("198 - 199", "0198/0199"),
        of("1989? - 1990?", "1989?/1990?"),
        of("?1989 - ?1990", "1989?/1990?"),
        //Unspecified
        of("1989 - ?", "1989/.."),
        of("1989 - -", "1989/.."),
        of("1989 - ..", "1989/.."),
        of("? - 1989", "../1989"),
        of("- - 1989", "../1989"),
        of(".. - 1989", "../1989")
    );
  }

  private static Stream<Arguments> year_PipeArguments() {
    return Stream.of(
        of("1989|1990", "1989/1990"),
        of("198|199", "0198/0199"),
        of("1989?|1990?", "1989?/1990?"),
        of("?1989|?1990", "1989?/1990?"),
        //Unspecified
        of("1989|?", "1989/.."),
        of("1989|-", "1989/.."),
        of("1989|..", "1989/.."),
        of("?|1989", "../1989"),
        of("-|1989", "../1989"),
        of("..|1989", "../1989")
    );
  }

  private static Stream<Arguments> year_DashArguments() {
    return Stream.of(
        of("1989-1990", "1989/1990"),
        of("198-199", "0198/0199"),
        of("1989?-1990?", "1989?/1990?"),
        of("?1989-?1990", "1989?/1990?"),
        of("?-198", "../0198"),
        of("1871 - 191-", null),
        //Ambiguous
        of("198-?", null),
        //Unspecified
        of("1989-?", "1989/.."),
        of("1989-..", "1989/.."),
        of("?-1989", "../1989"),
        of("..-1989", "../1989")
    );
  }

  private static Stream<Arguments> year_SpaceArguments() {
    return Stream.of(
        of("1989 1990", "1989/1990"),
        of("198 199", "0198/0199"),
        of("1989? 1990?", "1989?/1990?"),
        of("?1989 ?1990", "1989?/1990?"),
        //Unspecified does not apply on space separator
        of("1989 ", null, null),
        of("1989 ..", null, null),
        of(" 1989", null, null)
    );
  }

  private static Stream<Arguments> yearMonthArguments() {
    return Stream.of(
        yearMonth_SlashArguments(),
        yearMonth_SpacedDashArguments(),
        yearMonth_PipeArguments(),
        yearMonth_DashArguments(),
        yearMonth_SpaceArguments()
    ).flatMap(Function.identity());
  }

  private static Stream<Arguments> yearMonth_SlashArguments() {
    return Stream.of(
        of("1989-11/1990-11", "1989-11/1990-11"),
        of("1989.11/1990.11", "1989-11/1990-11"),
        of("198-11/199-11", "0198-11/0199-11"),
        of("198.11/199.11", "0198-11/0199-11"),
        of("1989-11?/1990-11?", "1989-11?/1990-11?"),
        of("1989.11?/1990.11?", "1989-11?/1990-11?"),
        of("?1989-11/?1990-11", "1989-11?/1990-11?"),
        of("?1989.11/?1990.11", "1989-11?/1990-11?"),
        //Unspecified
        of("1989-11/?", "1989-11/.."),
        of("1989-11/-", "1989-11/.."),
        of("1989-11/..", "1989-11/.."),
        of("?/1989-11", "../1989-11"),
        of("-/1989-11", "../1989-11"),
        of("../1989-11", "../1989-11"),
        of("1989.11/?", "1989-11/.."),
        of("1989.11/-", "1989-11/.."),
        of("1989.11/..", "1989-11/.."),
        of("?/1989.11", "../1989-11"),
        of("-/1989.11", "../1989-11"),
        of("../1989.11", "../1989-11")
    );
  }

  private static Stream<Arguments> yearMonth_SpacedDashArguments() {
    return Stream.of(
        of("1989-11 - 1990-11", "1989-11/1990-11"),
        of("1989.11 - 1990.11", "1989-11/1990-11"),
        of("1989/11 - 1990/11", "1989-11/1990-11"),
        of("198-11 - 199-11", "0198-11/0199-11"),
        of("198.11 - 199.11", "0198-11/0199-11"),
        of("198/11 - 199/11", "0198-11/0199-11"),
        of("1989-11? - 1990-11?", "1989-11?/1990-11?"),
        of("1989.11? - 1990.11?", "1989-11?/1990-11?"),
        of("1989/11? - 1990/11?", "1989-11?/1990-11?"),
        of("?1989-11 - ?1990-11", "1989-11?/1990-11?"),
        of("?1989.11 - ?1990.11", "1989-11?/1990-11?"),
        of("?1989/11 - ?1990/11", "1989-11?/1990-11?"),
        of("198.11 - 199.11", "0198-11/0199-11"),
        //Unspecified
        of("1989/11 - ?", "1989-11/.."),
        of("1989/11 - -", "1989-11/.."),
        of("1989/11 - ..", "1989-11/.."),
        of("? - 1989/11", "../1989-11"),
        of("- - 1989/11", "../1989-11"),
        of(".. - 1989/11", "../1989-11"),
        of("1989-11 - ?", "1989-11/.."),
        of("1989-11 - -", "1989-11/.."),
        of("1989-11 - ..", "1989-11/.."),
        of("? - 1989-11", "../1989-11"),
        of("- - 1989-11", "../1989-11"),
        of(".. - 1989-11", "../1989-11"),
        of("1989.11 - ?", "1989-11/.."),
        of("1989.11 - -", "1989-11/.."),
        of("1989.11 - ..", "1989-11/.."),
        of("? - 1989.11", "../1989-11"),
        of("- - 1989.11", "../1989-11"),
        of(".. - 1989.11", "../1989-11")
    );
  }

  private static Stream<Arguments> yearMonth_PipeArguments() {
    return Stream.of(
        of("1989-11|1990-11", "1989-11/1990-11"),
        of("1989.11|1990.11", "1989-11/1990-11"),
        of("1989/11|1990/11", "1989-11/1990-11"),
        of("198-11|199-11", "0198-11/0199-11"),
        of("198.11|199.11", "0198-11/0199-11"),
        of("198/11|199/11", "0198-11/0199-11"),
        of("1989-11?|1990-11?", "1989-11?/1990-11?"),
        of("1989.11?|1990.11?", "1989-11?/1990-11?"),
        of("1989/11?|1990/11?", "1989-11?/1990-11?"),
        of("?1989-11|?1990-11", "1989-11?/1990-11?"),
        of("?1989.11|?1990.11", "1989-11?/1990-11?"),
        of("?1989/11|?1990/11", "1989-11?/1990-11?"),
        of("198.11|199.11", "0198-11/0199-11"),
        //Unspecified
        of("1989/11|?", "1989-11/.."),
        of("1989/11|-", "1989-11/.."),
        of("1989/11|..", "1989-11/.."),
        of("?|1989/11", "../1989-11"),
        of("-|1989/11", "../1989-11"),
        of("..|1989/11", "../1989-11"),
        of("1989-11|?", "1989-11/.."),
        of("1989-11|-", "1989-11/.."),
        of("1989-11|..", "1989-11/.."),
        of("?|1989-11", "../1989-11"),
        of("-|1989-11", "../1989-11"),
        of("..|1989-11", "../1989-11"),
        of("1989.11|?", "1989-11/.."),
        of("1989.11|-", "1989-11/.."),
        of("1989.11|..", "1989-11/.."),
        of("?|1989.11", "../1989-11"),
        of("-|1989.11", "../1989-11"),
        of("..|1989.11", "../1989-11")
    );
  }

  private static Stream<Arguments> yearMonth_DashArguments() {
    return Stream.of(
        of("1989.11-1990.11", "1989-11/1990-11"),
        of("1989/11-1990/11", "1989-11/1990-11"),
        of("198.11-199.11", "0198-11/0199-11"),
        of("198/11-199/11", "0198-11/0199-11"),
        of("1989.11?-1990.11?", "1989-11?/1990-11?"),
        of("1989/11?-1990/11?", "1989-11?/1990-11?"),
        of("?1989/11-?1990/11", "1989-11?/1990-11?"),
        of("?1989.11-?1990.11", "1989-11?/1990-11?"),
        //Unspecified
        of("1989/11-?", "1989-11/.."),
        of("1989/11-..", "1989-11/.."),
        of("?-1989/11", "../1989-11"),
        of("--1989/11", null, null),
        of("..-1989/11", "../1989-11"),
        of("1989.11-?", "1989-11/.."),
        of("1989.11--", null, null),
        of("1989.11-..", "1989-11/.."),
        of("?-1989.11", "../1989-11"),
        of("--1989.11", null, null),
        of("..-1989.11", "../1989-11")
    );
  }

  private static Stream<Arguments> yearMonth_SpaceArguments() {
    return Stream.of(
        of("1989-11 1990-11", "1989-11/1990-11"),
        of("1989.11 1990.11", "1989-11/1990-11"),
        of("1989/11 1990/11", "1989-11/1990-11"),
        of("198-11 199-11", "0198-11/0199-11"),
        of("198.11 199.11", "0198-11/0199-11"),
        of("198/11 199/11", "0198-11/0199-11"),
        of("1989-11? 1990-11?", "1989-11?/1990-11?"),
        of("1989.11? 1990.11?", "1989-11?/1990-11?"),
        of("1989/11? 1990/11?", "1989-11?/1990-11?"),
        of("?1989-11 ?1990-11", "1989-11?/1990-11?"),
        of("?1989.11 ?1990.11", "1989-11?/1990-11?"),
        of("?1989/11 ?1990/11", "1989-11?/1990-11?"),
        //Unspecified does not apply on space separator
        of("1989/11 ", null, null),
        of(" 1989/11", null, null),
        of("1989-11 ", null, null),
        of(" 1989-11", null, null),
        of("1989.11 ", null, null),
        of(" 1989.11", null, null)
    );
  }

  private static Stream<Arguments> yearMonthDayArguments() {
    return Stream.of(
        yearMonthDay_SlashArguments(),
        yearMonthDay_SpacedDashArguments(),
        yearMonthDay_PipeArguments(),
        yearMonthDay_DashArguments(),
        yearMonthDay_SpaceArguments()
    ).flatMap(Function.identity());
  }

  private static Stream<Arguments> yearMonthDay_SlashArguments() {
    return Stream.of(
        of("1989-11-01/1990-11-01", "1989-11-01/1990-11-01"),
        of("1989.11.01/1990.11.01", "1989-11-01/1990-11-01"),
        of("198-11-01/199-11-01", "0198-11-01/0199-11-01"),
        of("198.11.01/199.11.01", "0198-11-01/0199-11-01"),
        //Some missing digits are allowed
        of("989-1-1/990-11-01", "0989-01-01/0990-11-01"),
        of("989.1.1/990.11.01", "0989-01-01/0990-11-01"),
        of("1989-11-01?/1990-11-01?", "1989-11-01?/1990-11-01?"),
        of("1989.11.01?/1990.11.01?", "1989-11-01?/1990-11-01?"),
        of("?1989-11-01/?1990-11-01", "1989-11-01?/1990-11-01?"),
        of("?1989.11.01/?1990.11.01", "1989-11-01?/1990-11-01?"),
        //Combination of date parts separators
        of("1989-11-01/1990.11.01", "1989-11-01/1990-11-01"),
        of("1989-11-01?/1990.11.01?", "1989-11-01?/1990-11-01?"),
        //Unspecified
        of("1989-11-01/?", "1989-11-01/.."),
        of("1989-11-01/-", "1989-11-01/.."),
        of("1989-11-01/..", "1989-11-01/.."),
        of("?/1989-11-01", "../1989-11-01"),
        of("-/1989-11-01", "../1989-11-01"),
        of("../1989-11-01", "../1989-11-01"),
        of("1989.11.01/?", "1989-11-01/.."),
        of("1989.11.01/-", "1989-11-01/.."),
        of("1989.11.01/..", "1989-11-01/.."),
        of("?/1989.11.01", "../1989-11-01"),
        of("-/1989.11.01", "../1989-11-01"),
        of("../1989.11.01", "../1989-11-01")
    );
  }

  private static Stream<Arguments> yearMonthDay_SpacedDashArguments() {
    return Stream.of(
        of("1989-11-01 - 1990-11-01", "1989-11-01/1990-11-01"),
        of("1989.11.01 - 1990.11.01", "1989-11-01/1990-11-01"),
        of("1989/11/01 - 1990/11/01", "1989-11-01/1990-11-01"),
        of("198-11-01 - 199-11-01", "0198-11-01/0199-11-01"),
        of("198.11.01 - 199.11.01", "0198-11-01/0199-11-01"),
        of("198/11/01 - 199/11/01", "0198-11-01/0199-11-01"),
        //Some missing digits are allowed
        of("989-1-1 - 990-11-01", "0989-01-01/0990-11-01"),
        of("989.1.1 - 990.11.01", "0989-01-01/0990-11-01"),
        of("989/1/1 - 990/11/01", "0989-01-01/0990-11-01"),
        of("1989-11-01? - 1990-11-01?", "1989-11-01?/1990-11-01?"),
        of("1989.11.01? - 1990.11.01?", "1989-11-01?/1990-11-01?"),
        of("1989/11/01? - 1990/11/01?", "1989-11-01?/1990-11-01?"),
        of("?1989-11-01 - ?1990-11-01", "1989-11-01?/1990-11-01?"),
        of("?1989.11.01 - ?1990.11.01", "1989-11-01?/1990-11-01?"),
        of("?1989/11/01 - ?1990/11/01", "1989-11-01?/1990-11-01?"),
        //Combination of date parts separators
        of("1989-11-01 - 1990.11.01", "1989-11-01/1990-11-01"),
        of("1989-11-01 - 1990/11/01", "1989-11-01/1990-11-01"),
        of("1989-11-01? - 1990.11.01?", "1989-11-01?/1990-11-01?"),
        of("1989-11-01? - 1990/11/01?", "1989-11-01?/1990-11-01?"),
        //Unspecified
        of("1989/11/01 - ?", "1989-11-01/.."),
        of("1989/11/01 - -", "1989-11-01/.."),
        of("1989/11/01 - ..", "1989-11-01/.."),
        of("? - 1989/11/01", "../1989-11-01"),
        of("- - 1989/11/01", "../1989-11-01"),
        of(".. - 1989/11/01", "../1989-11-01"),
        of("1989-11-01 - ?", "1989-11-01/.."),
        of("1989-11-01 - -", "1989-11-01/.."),
        of("1989-11-01 - ..", "1989-11-01/.."),
        of("? - 1989-11-01", "../1989-11-01"),
        of("- - 1989-11-01", "../1989-11-01"),
        of(".. - 1989-11-01", "../1989-11-01"),
        of("1989.11.01 - ?", "1989-11-01/.."),
        of("1989.11.01 - -", "1989-11-01/.."),
        of("1989.11.01 - ..", "1989-11-01/.."),
        of("? - 1989.11.01", "../1989-11-01"),
        of("- - 1989.11.01", "../1989-11-01"),
        of(".. - 1989.11.01", "../1989-11-01")
    );
  }

  private static Stream<Arguments> yearMonthDay_PipeArguments() {
    return Stream.of(
        of("1989-11-01|1990-11-01", "1989-11-01/1990-11-01"),
        of("1989.11.01|1990.11.01", "1989-11-01/1990-11-01"),
        of("1989/11/01|1990/11/01", "1989-11-01/1990-11-01"),
        of("198-11-01|199-11-01", "0198-11-01/0199-11-01"),
        of("198.11.01|199.11.01", "0198-11-01/0199-11-01"),
        of("198/11/01|199/11/01", "0198-11-01/0199-11-01"),
        //Some missing digits are allowed
        of("989-1-1|990-11-01", "0989-01-01/0990-11-01"),
        of("989.1.1|990.11.01", "0989-01-01/0990-11-01"),
        of("989/1/1|990/11/01", "0989-01-01/0990-11-01"),
        of("1989-11-01?|1990-11-01?", "1989-11-01?/1990-11-01?"),
        of("1989.11.01?|1990.11.01?", "1989-11-01?/1990-11-01?"),
        of("1989/11/01?|1990/11/01?", "1989-11-01?/1990-11-01?"),
        of("?1989-11-01|?1990-11-01", "1989-11-01?/1990-11-01?"),
        of("?1989.11.01|?1990.11.01", "1989-11-01?/1990-11-01?"),
        of("?1989/11/01|?1990/11/01", "1989-11-01?/1990-11-01?"),
        //Combination of date parts separators
        of("1989-11-01|1990.11.01", "1989-11-01/1990-11-01"),
        of("1989-11-01|1990/11/01", "1989-11-01/1990-11-01"),
        of("1989-11-01?|1990.11.01?", "1989-11-01?/1990-11-01?"),
        of("1989-11-01?|1990/11/01?", "1989-11-01?/1990-11-01?"),
        //Unspecified
        of("1989/11/01|?", "1989-11-01/.."),
        of("1989/11/01|-", "1989-11-01/.."),
        of("1989/11/01|..", "1989-11-01/.."),
        of("?|1989/11/01", "../1989-11-01"),
        of("-|1989/11/01", "../1989-11-01"),
        of("..|1989/11/01", "../1989-11-01"),
        of("1989-11-01|?", "1989-11-01/.."),
        of("1989-11-01|-", "1989-11-01/.."),
        of("1989-11-01|..", "1989-11-01/.."),
        of("?|1989-11-01", "../1989-11-01"),
        of("-|1989-11-01", "../1989-11-01"),
        of("..|1989-11-01", "../1989-11-01"),
        of("1989.11.01|?", "1989-11-01/.."),
        of("1989.11.01|-", "1989-11-01/.."),
        of("1989.11.01|..", "1989-11-01/.."),
        of("?|1989.11.01", "../1989-11-01"),
        of("-|1989.11.01", "../1989-11-01"),
        of("..|1989.11.01", "../1989-11-01")
    );
  }

  private static Stream<Arguments> yearMonthDay_DashArguments() {
    return Stream.of(
        of("1989/11/01-1990/11/01", "1989-11-01/1990-11-01"),
        of("1989.11.01-1990.11.01", "1989-11-01/1990-11-01"),
        of("198.11.01-199.11.01", "0198-11-01/0199-11-01"),
        of("198/11/01-199/11/01", "0198-11-01/0199-11-01"),
        //Some missing digits are allowed
        of("989.1.1-990.11.01", "0989-01-01/0990-11-01"),
        of("989/1/1-990/11/01", "0989-01-01/0990-11-01"),
        of("1989/11/01?-1990/11/01?", "1989-11-01?/1990-11-01?"),
        of("1989.11.01?-1990.11.01?", "1989-11-01?/1990-11-01?"),
        of("?1989/11/01-?1990/11/01", "1989-11-01?/1990-11-01?"),
        of("?1989.11.01-?1990.11.01", "1989-11-01?/1990-11-01?"),
        //Combination of date parts separators
        of("1989/11/01-1990.11.01", "1989-11-01/1990-11-01"),
        of("1989/11/01?-1990.11.01?", "1989-11-01?/1990-11-01?"),
        //Unspecified
        of("1989/11/01-?", "1989-11-01/.."),
        of("1989/11/01--", null, null),
        of("1989/11/01-..", "1989-11-01/.."),
        of("?-1989/11/01", "../1989-11-01"),
        of("--1989/11/01", null, null),
        of("..-1989/11/01", "../1989-11-01"),
        of("1989.11.01-?", "1989-11-01/.."),
        of("1989.11.01--", null, null),
        of("1989.11.01-..", "1989-11-01/.."),
        of("?-1989.11.01", "../1989-11-01"),
        of("--1989.11.01", null, null),
        of("..-1989.11.01", "../1989-11-01")
    );
  }

  private static Stream<Arguments> yearMonthDay_SpaceArguments() {
    return Stream.of(
        of("1989-11-01 1990-11-01", "1989-11-01/1990-11-01"),
        of("1989.11.01 1990.11.01", "1989-11-01/1990-11-01"),
        of("1989/11/01 1990/11/01", "1989-11-01/1990-11-01"),
        of("198-11-01 199-11-01", "0198-11-01/0199-11-01"),
        of("198.11.01 199.11.01", "0198-11-01/0199-11-01"),
        of("198/11/01 199/11/01", "0198-11-01/0199-11-01"),
        //Some missing digits are allowed
        of("989-1-1 990-11-01", "0989-01-01/0990-11-01"),
        of("989.1.1 990.11.01", "0989-01-01/0990-11-01"),
        of("989/1/1 990/11/01", "0989-01-01/0990-11-01"),
        of("1989-11-01? 1990-11-01?", "1989-11-01?/1990-11-01?"),
        of("1989.11.01? 1990.11.01?", "1989-11-01?/1990-11-01?"),
        of("1989/11/01? 1990/11/01?", "1989-11-01?/1990-11-01?"),
        of("?1989-11-01 ?1990-11-01", "1989-11-01?/1990-11-01?"),
        of("?1989.11.01 ?1990.11.01", "1989-11-01?/1990-11-01?"),
        of("?1989/11/01 ?1990/11/01", "1989-11-01?/1990-11-01?"),
        //Combination of date parts separators
        of("1989-11-01 1990.11.01", "1989-11-01/1990-11-01"),
        of("1989-11-01 1990/11/01", "1989-11-01/1990-11-01"),
        of("1989.11.01 1990/11/01", "1989-11-01/1990-11-01"),
        of("1989-11-01? 1990.11.01?", "1989-11-01?/1990-11-01?"),
        of("1989-11-01? 1990/11/01?", "1989-11-01?/1990-11-01?"),
        of("1989.11.01? 1990/11/01?", "1989-11-01?/1990-11-01?"),
        //Unspecified does not apply on space separator
        of("1989/11/01 ", null, null),
        of(" 1989/11/01", null, null),
        of("1989-11-01 ", null, null),
        of(" 1989-11-01", null, null),
        of("1989.11.01 ", null, null),
        of(" 1989.11.01", null, null)
    );
  }

  private static Stream<Arguments> yearMonthDayInvalidArguments() {
    return Stream.of(
        //Too few digits on year
        of("89-01-01/90-01-01", null, null),
        of("89.1.1/90.1.1", null, null),
        of("89/1/1-90/1/1", null, null),
        //Too many digits on year
        of("12345-01-01/12346-01-01", null, null),
        //Too many digits on month
        of("1234-123-12/1235-123-12", null, null),
        //Too many digits on day
        of("1234-12-123/1235-12-123", null, null)
    );
  }
}